<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tech on youtangaiのブログ</title>
    <link>https://youtangai.github.io/categories/tech/</link>
    <description>Recent content in Tech on youtangaiのブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright © 2019–2021, youtangai; all rights reserved.</copyright>
    <lastBuildDate>Sun, 12 Dec 2021 12:35:48 +0900</lastBuildDate><atom:link href="https://youtangai.github.io/categories/tech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>オレシカナイト16の配信構成</title>
      <link>https://youtangai.github.io/posts/oreshika_16/</link>
      <pubDate>Sun, 12 Dec 2021 12:35:48 +0900</pubDate>
      
      <guid>https://youtangai.github.io/posts/oreshika_16/</guid>
      <description>はじめに 皆さんこんにちは、なんとかジム通いを続けられているyoutangaiです。最近トレーニングにメニューにスクワットが追加されてめちゃめちゃきついですが、そのきつさに気持ちよさを感じ始めてきました。
この記事は、サイバーエージェントメディア事業部の広告横軸組織PTA(twitter)のアドベントカレンダー12日目の記事となります。よろしくお願い致します。
オレシカナイト PTAではだいたい3ヶ月に1回のペースで、アドテク勉強会「オレシカナイト」を実施しております。コロナ前まではオフラインで実施していたのですが、2020年7月に開催したVol13からYoutube上でオンライン配信する形式に変更しました。それから4回オンラインで勉強会を実施し、Vol16では様々な工夫ができるほど経験が溜まってきました。今回の記事では、Vol16配信の構成と工夫について述べます。ちなみに、オレシカナイトVol16のアーカイブはこちらにあるので、ぜひご覧ください。
配信画面 結論から述べると、配信画面は下図のようになっています。発表者(右側の人)と司会者(左側の人)が対話しているような画面になっております(オレンジ色の枠です)。また、発表者のスライドが画面の中央に配置されており、視聴者や司会者からの質問に対する回答のスライドを表示することができます(赤色の枠です)。 機材構成 配信はOBSという配信のアプリケーションで行っております。OBSに取り込む入力は以下のリストになります。
 映像  司会者の映像 発表者の映像 発表者のスライドの映像   音声  司会者&amp;amp;発表者のマイクの音声    これらのデータをOBSに取り込むための構成は下図の様になっております。 まず、マイクの音声と発表者スライドの取り込みについてです。これらのデータは会社から貸し出されているRoland VR-4HDにて取り込みます。マイクの音声は、赤白のオーディオケーブルからRolandに取り込みます。発表者のスライドはHDMIケーブルでRolandに取り込みます。Rolandからの情報はOBSに映像と音声が別々に取り込まれます。
続いて、司会者と発表者の映像取り込みについてです。これらのデータはRolandから取り込むことも可能だったのですが、Roland側でスライドと合成された形でしか取り込めません。スライドと司会者&amp;amp;発表者の映像はOBS上で切り離して取り込みたかったので、MiraBox VideoCaptureを用意しそこから取り込みました。余談ですが、2つのVideoCaptureは私物を利用しております。
OBS ここからは取り込んだ情報(映像と音声)の加工についてです。OBSでは取り込んだ映像と音声にフィルタをかけて配信にのせることが可能です。
音声 音声の加工は大きく下記2つです。
 音量の増幅 ノイズの低減  配信のテスト時にOBSに取り込んだ音声を確認すると、他の一般的なYouTube上の動画に比べて音量が小さいことがわかりました。そこで、OBS上のフィルタゲインを作成し27.4dBを設定しました。これで、入力される音声を増幅して配信にのせることができました。 しかし、その場合マイクから入ったノイズも増幅されてしまいます。これを回避するために、ノイズ抑制フィルタを作成しRNNoise(高品質、より多くのCPU使用率)を設定しました。 映像 司会者&amp;amp;発表者の後ろにはグリーンバックが設置してあります。そのため、人物の周りは緑色になって映像として取り込まれます。そこでクロマキーフィルタを利用することで、人物のみを切り抜くことができます。下記のような映像(今回はフリー素材で代替します)に対してクロマキーフィルタをかけると&amp;hellip; こうなります。 おわりに 以上が、オレシカナイトVol16における配信構成とOBSでの加工(フィルタ)の説明になります。もし、オンラインでの勉強会などを考えている方々に少しでも有益な情報を提供できていれば嬉しいです。OBSは使ってみるとそこまで難しくないと思います。
繰り返しになりますが、オレシカナイトVol16のアーカイブはこちらにあるので、ぜひご覧ください。</description>
    </item>
    
    <item>
      <title>Akka Streamsについて調べてみたよ</title>
      <link>https://youtangai.github.io/posts/akka_stream/</link>
      <pubDate>Tue, 07 Dec 2021 21:19:00 +0900</pubDate>
      
      <guid>https://youtangai.github.io/posts/akka_stream/</guid>
      <description>はじめに 皆さんこんにちは、最近パーソナルトレーニングを始めたyoutangaiです。 ダイエットと運動不足解消を目的に始めたのですが、適切なフォームでトレーニングできてとても満足度が高いです。
さて、今回の記事は、メディア事業部の広告横軸組織PTA(twitter)のアドベントカレンダー8日目の記事となります。よろしくお願い致します。
先に述べますと今回の内容はAkka Streamsの基礎的な概念を調査した内容になります。そのため、対象の読者は私と同じでAkka Streamsなんもわからんという方々です。
動機 Amebaの広告システムは稼働してから7,8年くらい(正確じゃないかもです)経過しており、古くから稼働しているシステムが結構あります。 その中でも、RDBに保存されているレコードをインメモリデータストアに保存するシステムが、ブラックボックスになってしまっています。 我々の広告配信システムにおいてかなり重要なシステムで、ここで障害が発生すると大損害が発生する可能性があります。 このままではまずいということで、このシステムについて調査することになりました。 しかし、このシステムはScalaのAkka Streamsで実装されており、ソースコードを読んでいてもすんなり理解できる内容ではありませんでした。 そこで、基礎的な部分からしっかり理解しようと思ったのが動機です。
Akka Streamsとは ここからが、本題です。
Akka Streamsとは、Reactive StreamsのAkka実装です。 そのため、Akka Streamsを理解するためにはReactive Streamsを理解する必要があります。
Reactive Streams Reactive Streamsのドキュメントではこのように記述されています。
Reactive Streams is an initiative to provide a standard for asynchronous stream processing with non-blocking back pressure 直訳すると、Reactive Streamsとはノンブロッキングなバックプレッシャーを備えた非同期ストリーム処理の標準です。 ノンブロッキングや非同期ストリーム処理はなんとなく想像がつくのですが、バックプレッシャーという単語は初耳でした。
バックプレッシャー Reactive Streamsでは、データを流すパブリッシャーと、流れてきたデータを受け取るサブスクライバーが登場します。
バックプレッシャーがない場合、パブリッシャーが流すデータの量がサブスクライバーの処理能力を上回ると、サブスクライバーの処理が間に合わず、データが詰まってしまいます。
このような問題を回避するためにバックプレッシャーがあります。サブスクライバーは、自身が処理できるデータ量を定義し、自身が処理できる分だけパブリッシャーからデータを受け取ります。パブリッシャー側で流量制限を行う必要がないため、効率よくデータを処理することが可能になります。
抽象概念について さて、これまでReactive Streamsについて述べてきましたが、ここからはAkka Streamsにおける概念について述べます。 Akka StreamsにはSource、Sink、Flow、Graphという4つの重要な抽象化された概念があります。先に簡単に述べてしまうと、Sourceでデータを作成し、Flowで流れてきたデータを加工し、Sinkで最終的に加工されたデータを受け取るという流れになっています。これらの流れ全体をGraphと呼びます。
Source データを生成する場所、つまりパブリッシャーです。ここで、ファイルの中身を読み出したり、HTTPリクエストボディの中身を読み出したり、データストアからデータを読み出したりする。
Sink 最終的にデータを受け取る場所、つまりサブスクライバーです。ここで、受け取ったデータをファイルに書き出したり、データストアに書き込んだりするはず。実際にファイル書き出ししている例は見つけたが、データストアに書き込んだりする例を見つけられなかったので想像の話をしています。例があったら教えて下さい。
Flow データを処理する場所です。Flowだけは特殊で、サブスクライバーでありパブリッシャーです。Sourceからデータを受け取ったり、FlowからFlowへデータが流れたり、FlowからSinkにデータを流したりします。 ここでは、流れてきたデータのデコード処理だったり、想定しないデータのフィルタリングなどを行います。
Graph Sourceに始まり、0以上のFlowを経由して、Sinkに終わる一連の流れがGraphです。 このGraphを定義し実行することで、処理されたデータを得ることができます。
おわりに 今回調べた結果、ソースコードを読んでいてわからないと思っていた部分が理解できたので、今後のシステム調査はスムーズに進んでくれるといいなと思っています。 引き続きシステムの調査は行うので、改めて調査が必要な内容が出てきたら再度まとめたいと考えています。</description>
    </item>
    
    <item>
      <title>EKSを1.16にバージョンアップするの大変だった</title>
      <link>https://youtangai.github.io/posts/eks_1_16/</link>
      <pubDate>Tue, 11 May 2021 22:24:44 +0900</pubDate>
      
      <guid>https://youtangai.github.io/posts/eks_1_16/</guid>
      <description>はじめに  この記事は、私が仕事でEKS(Elastic Kubernetes Service)のバージョンアップを行った際に、とても苦労したので備忘録も兼ねてやったこと・ハマったことをまとめた記事になります 私達のチームで運用しているEKSのバージョンが1.15だったのですが、EKSのリリースカレンダーをみると5月3日でサポートが終了してしまうという状況でした  これに気づいたのが4月20日頃で、猶予が2週間しかないので大慌てで更新作業を行いました    やるべきこと APIバージョンの変更  1.16の変更点として影響が大きかったのは一部のAPIバージョンが非対応になったことです 例えば、DaemonSetsとDeploymentsとReplicaSetsにおいて、extensions/v1beta1ではなくapps/v1を利用することが推奨になりました  変更対象のアプリケーション  私達のクラスタ上には、実際に非推奨のAPIバージョンで稼働しているDaemonSets・Deploymentsが存在していたので、それらのAPIバージョンを更新する必要がありました 対象となるアプリケーションは下記です(一部抜粋)  datadog cluster-autoscaler kiam external-dns    作業内容 作業内容は大きく以下の２つです。それぞれについて詳しく記述します。
 アプリケーションのAPIバージョン変更 ノードのバージョン変更  アプリケーションのAPIバージョン変更  基本的にアプリケーションはhelmfileで管理していたので、helmfileの変更作業の内容を記述します ちなみにhelmのバージョンは2系です  datadog  大まか作業内容  datadogはhelmのstable/datadogというチャートで管理しています もともとデプロイされていたバージョンは1.30.8でしたが、これを1.35.1に上げました   ハマったポイント  Podのイメージタグが変更されない  症状：チャートのバージョンを変更したにも関わらず、起動しているPodのイメージのタグが変更されませんでした 原因：jmx用のイメージを利用するためvaluesで直接タグが指定されていることに気づかなかったことです(valuesの中身をしっかりみるべきでした) 対応：valuesでイメージのタグを6.13.0-jmxに変更      cluster-autoscaler  大まか作業内容  cluster-autoscalerはhelmのstable/cluster-autoscalerというチャートで管理しています もともとデプロイされていたバージョンは0.12.4でしたが、これを7.0.0に上げました   ハマったポイント  autoDiscovery機能が働かない  症状：cluster-autoscalerが起動するも、AutoDiscovery機能によってAutoScalingGroupを発見したというログが流れない 原因：chartのバージョンが大きく上がったことでvaluesに新しくtagsという項目が追加されており、そこのデフォルトの値が期待するものと異なっていた 対応：下記内容を追加した      autoDiscovery: clusterName: {クラスタの名前} tags: - k8s.</description>
    </item>
    
    <item>
      <title>ElasticBeanstalkの仕組みを調べた</title>
      <link>https://youtangai.github.io/posts/elastic_beanstalk/</link>
      <pubDate>Mon, 26 Apr 2021 00:11:12 +0900</pubDate>
      
      <guid>https://youtangai.github.io/posts/elastic_beanstalk/</guid>
      <description>はじめに  この記事は、私が仕事で利用しているElastic BeanstalkがAWS上のどのような技術で構成されているのか知りたくて調べた結果をまとめた記事になります  入社してから1年近く利用しているのですが、特に深堀りすることもなく利用していたので、ちゃんと調べようと思った次第です   あまり突っ込んだところまでは調べてません AWSのどのリソースを利用して実現しているのかを調べています  Elastic Beanstalk(EB)とは  こちらがEBの公式ドキュメントです。日本語版も結構しっかりしているので、こちらを読むのが良いと思います。 私の認識でめっちゃ簡単に言うと、アプリケーションのプロビジョニング、ロードバランシング、スケーリング、モニタリングを自動的に行なってくれる環境を構築するサービスです  どうやって実現しているのか  いよいよ本題なのですが、こちらも公式のドキュメントを読むのが最も誤解なくて良いと思います。 ただ、この調子で公式ドキュメントのリンクを貼り付けていくだけでは私の頭に定着しないと思うので、自分の言葉で説明していきます  意図的に英語の公式ドキュメントを読むことで噛み砕くプロセスを追加しています(そんなことはどうでもいい)    構成要素  EB環境を構築すると、下記リソースが作られます  Elastic Load Balancer Route53のCNAMEレコード Auto Scaling Group EC2 Instance Security Group   それぞれについて詳細を深掘っていきます  Elastic Load Balancer &amp;amp; Route53  ロードバランサーがEB環境へのアクセスの入り口になります EB環境は、環境ごとにURLを持っています  例：{アプリケーション名}.{リージョン}.elasticbeanstalk.com このURLはロードバランサーへのエイリアスになっています  Route53にCNMAEレコードとして登録されています      Auto Sacling Group  上記ロードバランサの裏側にAuto Scaling Group(ASG)がいます このASGには1つ以上のEC2インスタンスが存在します  EB環境への負荷が高くなったら、ASGにインスタンスが追加される 逆に負荷が低くなれば、ASGからインスタンスが除かれる(ただし、常に少なくとも1つは存在する)    EC2 Instance  EC2インスタンス上にはHost Manager(HM)というコンポーネントが起動していて、このコンポーネントが下記のタスクを行っている  アプリケーションのデプロイ コンソールやAPI、コマンドラインでのイベントやメトリクスをアグリゲートする インスタンスレベルのイベントを生成する アプリケーションのログファイル監視 アプリケーションサーバの監視 Patching instance components(これよくわかりませんでした) アプリケーションログのローテーションをして、S3に保存する   デフォルトでポート80からのアクセスを許可するSecurity Groupが作成されていて、EBによって作成されたEC2はこのセキュリティグループに所属している  まとめると  EB環境へのリクエストはロードバランサでうける ロードバランサの裏にはASGがある ASGには常に1つ以上のEC2インスタンスが存在する EC2インスタンス上ではアプリケーションだけでなくHMが稼働しており、HMが色々やってる  終わりに  1年たってようやく調べたのですが、もっと早めに調べればよかったなと思ってます 今回はとっても簡単な調査程度で終わりますが、実際の環境で実験とかハマったこととか書いて行けるといいなと思っています(かける範囲で) 更新頑張るぞい  </description>
    </item>
    
  </channel>
</rss>
