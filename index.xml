<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>youtangaiのブログ</title>
    <link>https://youtangai.github.io/</link>
    <description>Recent content on youtangaiのブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright © 2019–2021, youtangai; all rights reserved.</copyright>
    <lastBuildDate>Tue, 10 Dec 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://youtangai.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>実用Go言語読んだやつ その1</title>
        <link>https://youtangai.github.io/posts/practical_go_1/</link>
        <pubDate>Wed, 20 Jul 2022 22:16:57 +0900</pubDate>
        
        <guid>https://youtangai.github.io/posts/practical_go_1/</guid>
        <description>youtangaiのブログ https://youtangai.github.io/posts/practical_go_1/ -&lt;h1 id=&#34;1章&#34;&gt;1章&lt;/h1&gt;
&lt;h2 id=&#34;変数名&#34;&gt;変数名&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;頭字語の場合、全部大文字か、全部小文字にする。ほかの単語と組み合わせる場合は、全部大文字にする。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ID, URL, id, url, ServeHTTP&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;エラーインタフェースを満たす型の名前には接尾辞&lt;code&gt;Error&lt;/code&gt;をつける
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MarshalerError, UnsupportedTypeError&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;errors.New(&amp;quot;&amp;quot;)で宣言されるようなエラーの変数は&lt;code&gt;err&lt;/code&gt;もしくは&lt;code&gt;Err&lt;/code&gt;から始める
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ErrTooLong, ErrAdvanceTooFar&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基本的に変数名は短い名前が好まれる
&lt;ul&gt;
&lt;li&gt;for文のi、requestのreq&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;しかし、グローバルだったりパッケージ外で呼ばれる変数は説明的であるほうがよい&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;パッケージ名&#34;&gt;パッケージ名&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;小文字で構成される1つの単語が好ましい
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bytes, http, list&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;汎用的すぎるパッケージ名は避けたい
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;util, common, api&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;スネークケースやキャメルケースのパッケージ名はGoらしくないので、フォルダ分けるのがよい
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;encoding_json -&amp;gt; encoding/json&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;パッケージは常に公開されているが、&lt;code&gt;internal&lt;/code&gt;はモジュール外から読めない&lt;/li&gt;
&lt;li&gt;テストパッケージで&lt;code&gt;{name}_test&lt;/code&gt;はあり&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;定数&#34;&gt;定数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;配列、スライス、マップ、関数の返り値は定数として定義できない&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; (
    a = []&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;} &lt;span style=&#34;color:#228b22&#34;&gt;// ダメ
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    b = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;{ &lt;span style=&#34;color:#228b22&#34;&gt;// ダメ
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,
        &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;tow&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;,
    }
    c = &lt;span style=&#34;color:#008b45&#34;&gt;function&lt;/span&gt;() &lt;span style=&#34;color:#228b22&#34;&gt;// ダメ
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;エラー定数&#34;&gt;エラー定数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;どうしても厳格にconstでErr定数を定義したい場合は以下のようにできる&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;type&lt;/span&gt; errDatabase &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; (e errDatabase) &lt;span style=&#34;color:#008b45&#34;&gt;Error&lt;/span&gt;() &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Database Error&amp;#34;&lt;/span&gt;
} 
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;const&lt;/span&gt; (
    ErrDatabase errDatabase = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;ここまで厳格にやる必要がなければ&lt;code&gt;var&lt;/code&gt;で気軽に定義するのもあり
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;databsae/sql&lt;/code&gt;パッケージでは下記のように定義されている&lt;/li&gt;
&lt;li&gt;しかし簡単に乗っ取り可能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; ErrConnDone = errors.&lt;span style=&#34;color:#008b45&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;sql: connection is already closed&amp;#34;&lt;/span&gt;)
ErrConnDone = errors.&lt;span style=&#34;color:#008b45&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;エラーを乗っ取ったぜ&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;関数の引数&#34;&gt;関数の引数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;たくさん引数がある場合、構造体を利用したオプション引数という手段がある&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;type&lt;/span&gt; (
    Option &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
        age &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;
        height &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;
        weight &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;
        health &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt;
    }

    Human &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
        age &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;
        height &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;
        weight &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;
        health &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt;
    }
)

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;NewHuman&lt;/span&gt;(opt Option) *Human {
    &lt;span style=&#34;color:#228b22&#34;&gt;// 100キロ以上は不健康
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; opt.weight &amp;lt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; {
        opt.health = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &amp;amp;Human{
        age: opt.age,
        height: opt.height,
        weight: opt.weight,
        health: opt.health,
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;ビルダーの手法もある
&lt;ul&gt;
&lt;li&gt;特定のフィールドの値を設定したオプション構造体を返すレシーバ関数を用意する&lt;/li&gt;
&lt;li&gt;メソッドチェーンでつないでいく&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;プログラムの引数&#34;&gt;プログラムの引数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;コマンドライン引数は下記ライブラリを使われてる
&lt;ul&gt;
&lt;li&gt;標準パッケージ&lt;code&gt;flag&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gopkg.in/alecthomas/kingpin.v2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;github.com/spf13/cobra&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;クラウドネイティブなアプリケーションにおいて、環境変数の利用が強く推奨されている
&lt;ul&gt;
&lt;li&gt;デプロイ時に環境変数を設定可能であるため、同じバイナリで柔軟に各環境向けの挙動を設定できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kelseyhightower/envconfig&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;メモリパフォーマンス&#34;&gt;メモリパフォーマンス&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;スライスのメモリが足りなかった場合、2倍のサイズを確保してからそこに内容をコピーする
&lt;ul&gt;
&lt;li&gt;1024までは2倍ずつメモリを確保する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;長さがわかっている場合は&lt;code&gt;make()&lt;/code&gt;でメモリを確保するべき
&lt;ul&gt;
&lt;li&gt;確保とコピーの頻度を減らせる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;mapも同様に&lt;code&gt;make()&lt;/code&gt;で確保するのがよい&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;文字列の結合&#34;&gt;文字列の結合&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;大量の文字列を結合する場合、&lt;code&gt;+&lt;/code&gt;を使ってループで結合するとパフォーマンスが下がる&lt;/li&gt;
&lt;li&gt;Goにおいて文字列は不変なので、新しい文字列を生成するたびにメモリ確保が行われる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strings&lt;/code&gt;パッケージの&lt;code&gt;strings.Builder&lt;/code&gt;を利用するのがよい
&lt;ul&gt;
&lt;li&gt;結合後のサイズがわかっているのであれば&lt;code&gt;Grow&lt;/code&gt;でバッファサイズをしていするのがよい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; builder strings.Builder
builder.&lt;span style=&#34;color:#008b45&#34;&gt;Grow&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;100&lt;/span&gt;) &lt;span style=&#34;color:#228b22&#34;&gt;// 100文字以下と仮定
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; i, word := &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;range&lt;/span&gt; src {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; i != &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; {
        builder.&lt;span style=&#34;color:#008b45&#34;&gt;WriteByte&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#228b22&#34;&gt;// byte配列として追加
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    }
    builder.&lt;span style=&#34;color:#008b45&#34;&gt;WriteString&lt;/span&gt;(word) &lt;span style=&#34;color:#228b22&#34;&gt;// byte配列として追加
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;}
log.&lt;span style=&#34;color:#008b45&#34;&gt;Println&lt;/span&gt;(builder.&lt;span style=&#34;color:#008b45&#34;&gt;String&lt;/span&gt;()) &lt;span style=&#34;color:#228b22&#34;&gt;// String()メソッドでstringにキャスト
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://youtangai.github.io/posts/practical_go_1/ - Copyright © 2019–2021, youtangai; all rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>オレシカナイト16の配信構成</title>
        <link>https://youtangai.github.io/posts/oreshika_16/</link>
        <pubDate>Sun, 12 Dec 2021 12:35:48 +0900</pubDate>
        
        <guid>https://youtangai.github.io/posts/oreshika_16/</guid>
        <description>youtangaiのブログ https://youtangai.github.io/posts/oreshika_16/ -&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;
&lt;p&gt;皆さんこんにちは、なんとかジム通いを続けられているyoutangaiです。最近トレーニングにメニューにスクワットが追加されてめちゃめちゃきついですが、そのきつさに気持ちよさを感じ始めてきました。&lt;/p&gt;
&lt;p&gt;この記事は、サイバーエージェントメディア事業部の広告横軸組織PTA(&lt;a href=&#34;https://twitter.com/PTA_CyberAgent&#34;&gt;twitter&lt;/a&gt;)の&lt;a href=&#34;https://adventar.org/calendars/6450&#34;&gt;アドベントカレンダー&lt;/a&gt;12日目の記事となります。よろしくお願い致します。&lt;/p&gt;
&lt;h1 id=&#34;オレシカナイト&#34;&gt;オレシカナイト&lt;/h1&gt;
&lt;p&gt;PTAではだいたい3ヶ月に1回のペースで、アドテク勉強会「オレシカナイト」を実施しております。コロナ前まではオフラインで実施していたのですが、2020年7月に開催したVol13からYoutube上でオンライン配信する形式に変更しました。それから4回オンラインで勉強会を実施し、Vol16では様々な工夫ができるほど経験が溜まってきました。今回の記事では、Vol16配信の構成と工夫について述べます。ちなみに、オレシカナイトVol16のアーカイブは&lt;a href=&#34;https://youtube.com/playlist?list=PLBsO-IAhmMUUw5_3PTQ7L0kfcnzhogpR_&#34;&gt;こちら&lt;/a&gt;にあるので、ぜひご覧ください。&lt;/p&gt;
&lt;h1 id=&#34;配信画面&#34;&gt;配信画面&lt;/h1&gt;
&lt;p&gt;結論から述べると、配信画面は下図のようになっています。発表者(右側の人)と司会者(左側の人)が対話しているような画面になっております(オレンジ色の枠です)。また、発表者のスライドが画面の中央に配置されており、視聴者や司会者からの質問に対する回答のスライドを表示することができます(赤色の枠です)。
&lt;img src=&#34;https://youtangai.github.io/images/oreshika_16/stream_screen_struct.png&#34; alt=&#34;画面構成&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;機材構成&#34;&gt;機材構成&lt;/h1&gt;
&lt;p&gt;配信は&lt;a href=&#34;https://obsproject.com/ja&#34;&gt;OBS&lt;/a&gt;という配信のアプリケーションで行っております。OBSに取り込む入力は以下のリストになります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;映像
&lt;ul&gt;
&lt;li&gt;司会者の映像&lt;/li&gt;
&lt;li&gt;発表者の映像&lt;/li&gt;
&lt;li&gt;発表者のスライドの映像&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;音声
&lt;ul&gt;
&lt;li&gt;司会者&amp;amp;発表者のマイクの音声&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらのデータをOBSに取り込むための構成は下図の様になっております。
&lt;img src=&#34;https://youtangai.github.io/images/oreshika_16/stream_structure.jpg&#34; alt=&#34;配信構成&#34;&gt;
まず、マイクの音声と発表者スライドの取り込みについてです。これらのデータは会社から貸し出されている&lt;code&gt;Roland VR-4HD&lt;/code&gt;にて取り込みます。マイクの音声は、赤白のオーディオケーブルからRolandに取り込みます。発表者のスライドはHDMIケーブルでRolandに取り込みます。Rolandからの情報はOBSに映像と音声が別々に取り込まれます。&lt;/p&gt;
&lt;p&gt;続いて、司会者と発表者の映像取り込みについてです。これらのデータはRolandから取り込むことも可能だったのですが、Roland側でスライドと合成された形でしか取り込めません。スライドと司会者&amp;amp;発表者の映像はOBS上で切り離して取り込みたかったので、&lt;code&gt;MiraBox VideoCapture&lt;/code&gt;を用意しそこから取り込みました。余談ですが、2つのVideoCaptureは私物を利用しております。&lt;/p&gt;
&lt;h1 id=&#34;obs&#34;&gt;OBS&lt;/h1&gt;
&lt;p&gt;ここからは取り込んだ情報(映像と音声)の加工についてです。OBSでは取り込んだ映像と音声にフィルタをかけて配信にのせることが可能です。&lt;/p&gt;
&lt;h2 id=&#34;音声&#34;&gt;音声&lt;/h2&gt;
&lt;p&gt;音声の加工は大きく下記2つです。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;音量の増幅&lt;/li&gt;
&lt;li&gt;ノイズの低減&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;配信のテスト時にOBSに取り込んだ音声を確認すると、他の一般的なYouTube上の動画に比べて音量が小さいことがわかりました。そこで、OBS上のフィルタ&lt;code&gt;ゲイン&lt;/code&gt;を作成し&lt;code&gt;27.4dB&lt;/code&gt;を設定しました。これで、入力される音声を増幅して配信にのせることができました。
&lt;img src=&#34;https://youtangai.github.io/images/oreshika_16/filter_gain.png&#34; alt=&#34;ゲインフィルタ&#34;&gt;&lt;/p&gt;
&lt;p&gt;しかし、その場合マイクから入ったノイズも増幅されてしまいます。これを回避するために、&lt;code&gt;ノイズ抑制&lt;/code&gt;フィルタを作成し&lt;code&gt;RNNoise(高品質、より多くのCPU使用率)&lt;/code&gt;を設定しました。
&lt;img src=&#34;https://youtangai.github.io/images/oreshika_16/filter_noise.png&#34; alt=&#34;ノイズ抑制フィルタ&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;映像&#34;&gt;映像&lt;/h2&gt;
&lt;p&gt;司会者&amp;amp;発表者の後ろにはグリーンバックが設置してあります。そのため、人物の周りは緑色になって映像として取り込まれます。そこで&lt;code&gt;クロマキーフィルタ&lt;/code&gt;を利用することで、人物のみを切り抜くことができます。下記のような映像(今回はフリー素材で代替します)に対して&lt;code&gt;クロマキーフィルタ&lt;/code&gt;をかけると&amp;hellip;
&lt;img src=&#34;https://youtangai.github.io/images/oreshika_16/green_heart.png&#34; alt=&#34;ハートの手&#34;&gt;&lt;/p&gt;
&lt;p&gt;こうなります。
&lt;img src=&#34;https://youtangai.github.io/images/oreshika_16/green_heart_filter.png&#34; alt=&#34;ハートの手クロマキー&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;おわりに&#34;&gt;おわりに&lt;/h1&gt;
&lt;p&gt;以上が、オレシカナイトVol16における配信構成とOBSでの加工(フィルタ)の説明になります。もし、オンラインでの勉強会などを考えている方々に少しでも有益な情報を提供できていれば嬉しいです。OBSは使ってみるとそこまで難しくないと思います。&lt;/p&gt;
&lt;p&gt;繰り返しになりますが、オレシカナイトVol16のアーカイブは&lt;a href=&#34;https://youtube.com/playlist?list=PLBsO-IAhmMUUw5_3PTQ7L0kfcnzhogpR_&#34;&gt;こちら&lt;/a&gt;にあるので、ぜひご覧ください。&lt;/p&gt;
- https://youtangai.github.io/posts/oreshika_16/ - Copyright © 2019–2021, youtangai; all rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>Akka Streamsについて調べてみたよ</title>
        <link>https://youtangai.github.io/posts/akka_stream/</link>
        <pubDate>Tue, 07 Dec 2021 21:19:00 +0900</pubDate>
        
        <guid>https://youtangai.github.io/posts/akka_stream/</guid>
        <description>youtangaiのブログ https://youtangai.github.io/posts/akka_stream/ -&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;
&lt;p&gt;皆さんこんにちは、最近パーソナルトレーニングを始めたyoutangaiです。
ダイエットと運動不足解消を目的に始めたのですが、適切なフォームでトレーニングできてとても満足度が高いです。&lt;/p&gt;
&lt;p&gt;さて、今回の記事は、メディア事業部の広告横軸組織PTA(&lt;a href=&#34;https://twitter.com/PTA_CyberAgent&#34;&gt;twitter&lt;/a&gt;)の&lt;a href=&#34;https://adventar.org/calendars/6450&#34;&gt;アドベントカレンダー&lt;/a&gt;8日目の記事となります。よろしくお願い致します。&lt;/p&gt;
&lt;p&gt;先に述べますと今回の内容はAkka Streamsの基礎的な概念を調査した内容になります。そのため、対象の読者は私と同じで&lt;code&gt;Akka Streamsなんもわからん&lt;/code&gt;という方々です。&lt;/p&gt;
&lt;h1 id=&#34;動機&#34;&gt;動機&lt;/h1&gt;
&lt;p&gt;Amebaの広告システムは稼働してから7,8年くらい(正確じゃないかもです)経過しており、古くから稼働しているシステムが結構あります。
その中でも、RDBに保存されているレコードをインメモリデータストアに保存するシステムが、ブラックボックスになってしまっています。
我々の広告配信システムにおいてかなり重要なシステムで、ここで障害が発生すると大損害が発生する可能性があります。
このままではまずいということで、このシステムについて調査することになりました。
しかし、このシステムはScalaのAkka Streamsで実装されており、ソースコードを読んでいてもすんなり理解できる内容ではありませんでした。
そこで、基礎的な部分からしっかり理解しようと思ったのが動機です。&lt;/p&gt;
&lt;h1 id=&#34;akka-streamsとは&#34;&gt;Akka Streamsとは&lt;/h1&gt;
&lt;p&gt;ここからが、本題です。&lt;br&gt;
Akka Streamsとは、&lt;a href=&#34;https://www.reactive-streams.org/&#34;&gt;Reactive Streams&lt;/a&gt;のAkka実装です。
そのため、Akka Streamsを理解するためにはReactive Streamsを理解する必要があります。&lt;/p&gt;
&lt;h2 id=&#34;reactive-streams&#34;&gt;Reactive Streams&lt;/h2&gt;
&lt;p&gt;Reactive Streamsのドキュメントではこのように記述されています。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Reactive Streams is an initiative to provide a standard for asynchronous stream processing with non-blocking back pressure
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;直訳すると、Reactive Streamsとは&lt;code&gt;ノンブロッキング&lt;/code&gt;な&lt;code&gt;バックプレッシャー&lt;/code&gt;を備えた&lt;code&gt;非同期ストリーム処理の標準&lt;/code&gt;です。
ノンブロッキングや非同期ストリーム処理はなんとなく想像がつくのですが、バックプレッシャーという単語は初耳でした。&lt;/p&gt;
&lt;h2 id=&#34;バックプレッシャー&#34;&gt;バックプレッシャー&lt;/h2&gt;
&lt;p&gt;Reactive Streamsでは、データを流す&lt;code&gt;パブリッシャー&lt;/code&gt;と、流れてきたデータを受け取る&lt;code&gt;サブスクライバー&lt;/code&gt;が登場します。&lt;/p&gt;
&lt;p&gt;バックプレッシャーがない場合、パブリッシャーが流すデータの量がサブスクライバーの処理能力を上回ると、サブスクライバーの処理が間に合わず、データが詰まってしまいます。&lt;/p&gt;
&lt;p&gt;このような問題を回避するためにバックプレッシャーがあります。サブスクライバーは、自身が処理できるデータ量を定義し、自身が処理できる分だけパブリッシャーからデータを受け取ります。パブリッシャー側で流量制限を行う必要がないため、効率よくデータを処理することが可能になります。&lt;/p&gt;
&lt;h1 id=&#34;抽象概念について&#34;&gt;抽象概念について&lt;/h1&gt;
&lt;p&gt;さて、これまでReactive Streamsについて述べてきましたが、ここからはAkka Streamsにおける概念について述べます。
Akka Streamsには&lt;code&gt;Source&lt;/code&gt;、&lt;code&gt;Sink&lt;/code&gt;、&lt;code&gt;Flow&lt;/code&gt;、&lt;code&gt;Graph&lt;/code&gt;という4つの重要な抽象化された概念があります。先に簡単に述べてしまうと、Sourceでデータを作成し、Flowで流れてきたデータを加工し、Sinkで最終的に加工されたデータを受け取るという流れになっています。これらの流れ全体をGraphと呼びます。&lt;/p&gt;
&lt;h2 id=&#34;source&#34;&gt;Source&lt;/h2&gt;
&lt;p&gt;データを生成する場所、つまりパブリッシャーです。ここで、ファイルの中身を読み出したり、HTTPリクエストボディの中身を読み出したり、データストアからデータを読み出したりする。&lt;/p&gt;
&lt;h2 id=&#34;sink&#34;&gt;Sink&lt;/h2&gt;
&lt;p&gt;最終的にデータを受け取る場所、つまりサブスクライバーです。ここで、受け取ったデータをファイルに書き出したり、データストアに書き込んだりするはず。実際にファイル書き出ししている例は見つけたが、データストアに書き込んだりする例を見つけられなかったので想像の話をしています。例があったら教えて下さい。&lt;/p&gt;
&lt;h2 id=&#34;flow&#34;&gt;Flow&lt;/h2&gt;
&lt;p&gt;データを処理する場所です。Flowだけは特殊で、サブスクライバーでありパブリッシャーです。Sourceからデータを受け取ったり、FlowからFlowへデータが流れたり、FlowからSinkにデータを流したりします。
ここでは、流れてきたデータのデコード処理だったり、想定しないデータのフィルタリングなどを行います。&lt;/p&gt;
&lt;h2 id=&#34;graph&#34;&gt;Graph&lt;/h2&gt;
&lt;p&gt;Sourceに始まり、0以上のFlowを経由して、Sinkに終わる一連の流れがGraphです。
このGraphを定義し実行することで、処理されたデータを得ることができます。&lt;/p&gt;
&lt;h1 id=&#34;おわりに&#34;&gt;おわりに&lt;/h1&gt;
&lt;p&gt;今回調べた結果、ソースコードを読んでいてわからないと思っていた部分が理解できたので、今後のシステム調査はスムーズに進んでくれるといいなと思っています。
引き続きシステムの調査は行うので、改めて調査が必要な内容が出てきたら再度まとめたいと考えています。&lt;/p&gt;
&lt;p&gt;最後まで読んでいただきありがとうございました。&lt;/p&gt;
&lt;h1 id=&#34;参考文献&#34;&gt;参考文献&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;Reactive Streams&amp;rdquo;. &lt;a href=&#34;https://www.reactive-streams.org/&#34;&gt;https://www.reactive-streams.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Xiao Yang. &amp;ldquo;Akka Streamsについての基礎概念&amp;rdquo;. Qiita. 2018/02/01. &lt;a href=&#34;https://qiita.com/xoyo24/items/299ee3e624f4afe2d27a,&#34;&gt;https://qiita.com/xoyo24/items/299ee3e624f4afe2d27a,&lt;/a&gt; (Accessed: 2021/12/07)&lt;/li&gt;
&lt;li&gt;前出祐吾. &amp;ldquo;Akka Streamsで実装するリアクティブストリーム&amp;rdquo;._ Think IT. 2018/03/07. &lt;a href=&#34;https://thinkit.co.jp/article/13485,&#34;&gt;https://thinkit.co.jp/article/13485,&lt;/a&gt; (Accessed: 2021/12/07)&lt;/li&gt;
&lt;/ul&gt;
- https://youtangai.github.io/posts/akka_stream/ - Copyright © 2019–2021, youtangai; all rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>EKSを1.16にバージョンアップするの大変だった</title>
        <link>https://youtangai.github.io/posts/eks_1_16/</link>
        <pubDate>Tue, 11 May 2021 22:24:44 +0900</pubDate>
        
        <guid>https://youtangai.github.io/posts/eks_1_16/</guid>
        <description>youtangaiのブログ https://youtangai.github.io/posts/eks_1_16/ -&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;この記事は、私が仕事でEKS(Elastic Kubernetes Service)のバージョンアップを行った際に、とても苦労したので備忘録も兼ねてやったこと・ハマったことをまとめた記事になります&lt;/li&gt;
&lt;li&gt;私達のチームで運用しているEKSのバージョンが1.15だったのですが、&lt;a href=&#34;https://docs.aws.amazon.com/ja_jp/eks/latest/userguide/kubernetes-versions.html#kubernetes-release-calendar&#34;&gt;EKSのリリースカレンダー&lt;/a&gt;をみると5月3日でサポートが終了してしまうという状況でした
&lt;ul&gt;
&lt;li&gt;これに気づいたのが4月20日頃で、猶予が2週間しかないので大慌てで更新作業を行いました&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;やるべきこと&#34;&gt;やるべきこと&lt;/h1&gt;
&lt;h2 id=&#34;apiバージョンの変更&#34;&gt;APIバージョンの変更&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/release-1.16/CHANGELOG/CHANGELOG-1.16.md#deprecations-and-removals&#34;&gt;1.16の変更点&lt;/a&gt;として影響が大きかったのは一部のAPIバージョンが非対応になったことです&lt;/li&gt;
&lt;li&gt;例えば、DaemonSetsとDeploymentsとReplicaSetsにおいて、&lt;code&gt;extensions/v1beta1&lt;/code&gt;ではなく&lt;code&gt;apps/v1&lt;/code&gt;を利用することが推奨になりました&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;変更対象のアプリケーション&#34;&gt;変更対象のアプリケーション&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;私達のクラスタ上には、実際に非推奨のAPIバージョンで稼働しているDaemonSets・Deploymentsが存在していたので、それらのAPIバージョンを更新する必要がありました&lt;/li&gt;
&lt;li&gt;対象となるアプリケーションは下記です(一部抜粋)
&lt;ul&gt;
&lt;li&gt;datadog&lt;/li&gt;
&lt;li&gt;cluster-autoscaler&lt;/li&gt;
&lt;li&gt;kiam&lt;/li&gt;
&lt;li&gt;external-dns&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;作業内容&#34;&gt;作業内容&lt;/h1&gt;
&lt;p&gt;作業内容は大きく以下の２つです。それぞれについて詳しく記述します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アプリケーションのAPIバージョン変更&lt;/li&gt;
&lt;li&gt;ノードのバージョン変更&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;アプリケーションのapiバージョン変更&#34;&gt;アプリケーションのAPIバージョン変更&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;基本的にアプリケーションはhelmfileで管理していたので、helmfileの変更作業の内容を記述します&lt;/li&gt;
&lt;li&gt;ちなみにhelmのバージョンは2系です&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;datadog&#34;&gt;datadog&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;大まか作業内容
&lt;ul&gt;
&lt;li&gt;datadogはhelmの&lt;code&gt;stable/datadog&lt;/code&gt;というチャートで管理しています&lt;/li&gt;
&lt;li&gt;もともとデプロイされていたバージョンは&lt;code&gt;1.30.8&lt;/code&gt;でしたが、これを&lt;code&gt;1.35.1&lt;/code&gt;に上げました&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ハマったポイント
&lt;ul&gt;
&lt;li&gt;Podのイメージタグが変更されない
&lt;ul&gt;
&lt;li&gt;症状：チャートのバージョンを変更したにも関わらず、起動しているPodのイメージのタグが変更されませんでした&lt;/li&gt;
&lt;li&gt;原因：jmx用のイメージを利用するためvaluesで直接タグが指定されていることに気づかなかったことです(valuesの中身をしっかりみるべきでした)&lt;/li&gt;
&lt;li&gt;対応：valuesでイメージのタグを&lt;code&gt;6.13.0-jmx&lt;/code&gt;に変更&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cluster-autoscaler&#34;&gt;cluster-autoscaler&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;大まか作業内容
&lt;ul&gt;
&lt;li&gt;cluster-autoscalerはhelmの&lt;code&gt;stable/cluster-autoscaler&lt;/code&gt;というチャートで管理しています&lt;/li&gt;
&lt;li&gt;もともとデプロイされていたバージョンは&lt;code&gt;0.12.4&lt;/code&gt;でしたが、これを&lt;code&gt;7.0.0&lt;/code&gt;に上げました&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ハマったポイント
&lt;ol&gt;
&lt;li&gt;autoDiscovery機能が働かない
&lt;ul&gt;
&lt;li&gt;症状：cluster-autoscalerが起動するも、AutoDiscovery機能によってAutoScalingGroupを発見したというログが流れない&lt;/li&gt;
&lt;li&gt;原因：chartのバージョンが大きく上がったことでvaluesに新しく&lt;code&gt;tags&lt;/code&gt;という項目が追加されており、そこのデフォルトの値が期待するものと異なっていた&lt;/li&gt;
&lt;li&gt;対応：下記内容を追加した&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;autoDiscovery:
    clusterName: {クラスタの名前}
    tags:
        - k8s.io/cluster-autoscaler/enabled
        - kubernetes.io/cluster/{クラスタの名前}
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;1. スケールアウトしない
   - 症状：PendingになっているPodがあるにも関わらず新しいNodeが起動しない
   - 原因：valuesで、cluster-autoscalerイメージのタグに`1.16.0`を指定していたのですが`1.16.0`に[バグ](https://github.com/kubernetes/autoscaler/issues/2345)があった
   - 対応：イメージのタグを`1.16.1`に変更した
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;おわりに&#34;&gt;おわりに&lt;/h1&gt;
&lt;p&gt;力尽きてしまったので今日はここまで。
kiam、external-dns、ノードのバージョン変更についてはまた別の機会に&amp;hellip;&lt;/p&gt;
- https://youtangai.github.io/posts/eks_1_16/ - Copyright © 2019–2021, youtangai; all rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>ElasticBeanstalkの仕組みを調べた</title>
        <link>https://youtangai.github.io/posts/elastic_beanstalk/</link>
        <pubDate>Mon, 26 Apr 2021 00:11:12 +0900</pubDate>
        
        <guid>https://youtangai.github.io/posts/elastic_beanstalk/</guid>
        <description>youtangaiのブログ https://youtangai.github.io/posts/elastic_beanstalk/ -&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;この記事は、私が仕事で利用しているElastic BeanstalkがAWS上のどのような技術で構成されているのか知りたくて調べた結果をまとめた記事になります
&lt;ul&gt;
&lt;li&gt;入社してから1年近く利用しているのですが、特に深堀りすることもなく利用していたので、ちゃんと調べようと思った次第です&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;あまり突っ込んだところまでは調べてません&lt;/li&gt;
&lt;li&gt;AWSのどのリソースを利用して実現しているのかを調べています&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;elastic-beanstalkebとは&#34;&gt;Elastic Beanstalk(EB)とは&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/ja_jp/elasticbeanstalk/latest/dg/Welcome.html&#34;&gt;こちら&lt;/a&gt;がEBの公式ドキュメントです。日本語版も結構しっかりしているので、こちらを読むのが良いと思います。&lt;/li&gt;
&lt;li&gt;私の認識でめっちゃ簡単に言うと、アプリケーションのプロビジョニング、ロードバランシング、スケーリング、モニタリングを自動的に行なってくれる環境を構築するサービスです&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;どうやって実現しているのか&#34;&gt;どうやって実現しているのか&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;いよいよ本題なのですが、こちらも&lt;a href=&#34;https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts-webserver.html&#34;&gt;公式のドキュメント&lt;/a&gt;を読むのが最も誤解なくて良いと思います。&lt;/li&gt;
&lt;li&gt;ただ、この調子で公式ドキュメントのリンクを貼り付けていくだけでは私の頭に定着しないと思うので、自分の言葉で説明していきます
&lt;ul&gt;
&lt;li&gt;意図的に英語の公式ドキュメントを読むことで噛み砕くプロセスを追加しています(そんなことはどうでもいい)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;構成要素&#34;&gt;構成要素&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;EB環境を構築すると、下記リソースが作られます
&lt;ul&gt;
&lt;li&gt;Elastic Load Balancer&lt;/li&gt;
&lt;li&gt;Route53のCNAMEレコード&lt;/li&gt;
&lt;li&gt;Auto Scaling Group&lt;/li&gt;
&lt;li&gt;EC2 Instance&lt;/li&gt;
&lt;li&gt;Security Group&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;それぞれについて詳細を深掘っていきます&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;elastic-load-balancer--route53&#34;&gt;Elastic Load Balancer &amp;amp; Route53&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ロードバランサーがEB環境へのアクセスの入り口になります&lt;/li&gt;
&lt;li&gt;EB環境は、環境ごとにURLを持っています
&lt;ul&gt;
&lt;li&gt;例：{アプリケーション名}.{リージョン}.elasticbeanstalk.com&lt;/li&gt;
&lt;li&gt;このURLはロードバランサーへのエイリアスになっています
&lt;ul&gt;
&lt;li&gt;Route53にCNMAEレコードとして登録されています&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;auto-sacling-group&#34;&gt;Auto Sacling Group&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;上記ロードバランサの裏側にAuto Scaling Group(ASG)がいます&lt;/li&gt;
&lt;li&gt;このASGには1つ以上のEC2インスタンスが存在します
&lt;ul&gt;
&lt;li&gt;EB環境への負荷が高くなったら、ASGにインスタンスが追加される&lt;/li&gt;
&lt;li&gt;逆に負荷が低くなれば、ASGからインスタンスが除かれる(ただし、常に少なくとも1つは存在する)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ec2-instance&#34;&gt;EC2 Instance&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;EC2インスタンス上にはHost Manager(HM)というコンポーネントが起動していて、このコンポーネントが下記のタスクを行っている
&lt;ul&gt;
&lt;li&gt;アプリケーションのデプロイ&lt;/li&gt;
&lt;li&gt;コンソールやAPI、コマンドラインでのイベントやメトリクスをアグリゲートする&lt;/li&gt;
&lt;li&gt;インスタンスレベルのイベントを生成する&lt;/li&gt;
&lt;li&gt;アプリケーションのログファイル監視&lt;/li&gt;
&lt;li&gt;アプリケーションサーバの監視&lt;/li&gt;
&lt;li&gt;Patching instance components(これよくわかりませんでした)&lt;/li&gt;
&lt;li&gt;アプリケーションログのローテーションをして、S3に保存する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;デフォルトでポート80からのアクセスを許可するSecurity Groupが作成されていて、EBによって作成されたEC2はこのセキュリティグループに所属している&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;まとめると&#34;&gt;まとめると&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;EB環境へのリクエストはロードバランサでうける&lt;/li&gt;
&lt;li&gt;ロードバランサの裏にはASGがある&lt;/li&gt;
&lt;li&gt;ASGには常に1つ以上のEC2インスタンスが存在する&lt;/li&gt;
&lt;li&gt;EC2インスタンス上ではアプリケーションだけでなくHMが稼働しており、HMが色々やってる&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;終わりに&#34;&gt;終わりに&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;1年たってようやく調べたのですが、もっと早めに調べればよかったなと思ってます&lt;/li&gt;
&lt;li&gt;今回はとっても簡単な調査程度で終わりますが、実際の環境で実験とかハマったこととか書いて行けるといいなと思っています(かける範囲で)&lt;/li&gt;
&lt;li&gt;更新頑張るぞい&lt;/li&gt;
&lt;/ul&gt;
- https://youtangai.github.io/posts/elastic_beanstalk/ - Copyright © 2019–2021, youtangai; all rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>おすすめ百合作品紹介</title>
        <link>https://youtangai.github.io/posts/yuri_introduction/</link>
        <pubDate>Thu, 12 Dec 2019 18:27:00 +0900</pubDate>
        
        <guid>https://youtangai.github.io/posts/yuri_introduction/</guid>
        <description>youtangaiのブログ https://youtangai.github.io/posts/yuri_introduction/ -&lt;h3 id=&#34;はじめに&#34;&gt;はじめに&lt;/h3&gt;
&lt;p&gt;この投稿は&lt;a href=&#34;https://adventar.org/calendars/4179&#34;&gt;FUN Advent Calendar 2019 part2&lt;/a&gt;の2日目の投稿です&lt;/p&gt;
&lt;p&gt;しかし、私は2日を過ぎてから「空いてるのでやりませんか？」と誘ってもらってから書いたので投稿は12月18日となっています&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;許してください&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;私については&lt;a href=&#34;https://youtangai.github.io/about/&#34;&gt;こちら&lt;/a&gt;をご覧いただけると幸いです&lt;/p&gt;
&lt;h3 id=&#34;百合作品紹介&#34;&gt;百合作品紹介&lt;/h3&gt;
&lt;p&gt;初めての投稿では、私の百合人生において大きな影響を与えてくれた4個の百合作品を紹介します。百合男子としてまだまだにわかの領域を出ませんが、「私もその作品好き！」とか「その作品知らないから読んでみたいな」と思ってもらえるように紹介できたら良いなと思っています。&lt;/p&gt;
&lt;p&gt;唐突ですが、百合漫画界隈では有名な&lt;a href=&#34;http://yurinavi.com/&#34;&gt;百合ナビ&lt;/a&gt;というサイトがあります。&lt;a href=&#34;https://twitter.com/yuri_navi&#34;&gt;ふりっぺさん&lt;/a&gt;という方が運営されているのですが、ここで&lt;strong&gt;百合漫画総選挙&lt;/strong&gt;という企画が2017、2018、2019年と3回行われています。正直、百合作品を知るにはこちらを見たほうが情報の品質が高いので、ぜひこちらも見てみてください。&lt;/p&gt;
&lt;p&gt;以下に、過去の百合漫画総選挙の結果ページのリンクを張っておきます。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://yurinavi.com/2017/09/04/yurimangasousenkyo-matome/&#34;&gt;第1回百合漫画総選挙&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://yurinavi.com/2018/08/09/dainikai_yurimangasosenkyo_10-1/&#34;&gt;第2回百合漫画総選挙&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://yurinavi.com/2019/08/14/daisankai-yurimanga-sousenkyo-01_10/&#34;&gt;第3回百合漫画総選挙&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;4個の百合作品&#34;&gt;4個の百合作品&lt;/h3&gt;
&lt;p&gt;早速ですが、まずは全作品のタイトルを列挙します(作品に出会った順)。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ゆるゆり&lt;/li&gt;
&lt;li&gt;GIRL FRIENDS&lt;/li&gt;
&lt;li&gt;加瀬さんシリーズ&lt;/li&gt;
&lt;li&gt;オトメの帝国&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;聞き覚えがあるものはありますか？
ある人はぜひ私と語り合いましょう。&lt;a href=&#34;https://twitter.com/youtangai&#34;&gt;twitter&lt;/a&gt;でお待ちしております。&lt;/p&gt;
&lt;p&gt;聞き覚えが無い作品がありますか？Kindleアプリをご利用でしたら貸し出すのでぜひ&lt;a href=&#34;https://twitter.com/youtangai&#34;&gt;twitter&lt;/a&gt;にて連絡してください。読んだあとに語りあいましょう。&lt;/p&gt;
&lt;p&gt;1つずつ詳細に紹介するにはあまりにも量が多いので、私が感じている&lt;strong&gt;作品の特徴&lt;/strong&gt;を紹介していきます！&lt;/p&gt;
&lt;h4 id=&#34;1-ゆるゆり&#34;&gt;1. ゆるゆり&lt;/h4&gt;
&lt;p&gt;ゆるゆりはコミック百合姫で連載されているなもり先生の作品です。&lt;/p&gt;
&lt;p&gt;2019年に10周年を迎えた作品で、界隈ではかなり有名な作品となっています。タイトルだけでも知っている方は多いのではないでしょうか？&lt;/p&gt;
&lt;p&gt;ゆるゆりは3期までアニメ化されるほどの人気作品で、かなりの人を百合に目覚めさせ、百合の普及に大きく貢献された作品だと思っています。&lt;/p&gt;
&lt;p&gt;私もこのゆるゆりがきっかけで百合に目覚めました。&lt;/p&gt;
&lt;h5 id=&#34;ここみてポイント&#34;&gt;ここみてポイント&lt;/h5&gt;
&lt;p&gt;ゆるゆりという作品を紹介する上で絶対に外せないのは&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;登場するキャラクター同士で様々なカップリングが楽しめる&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;という点です。&lt;/p&gt;
&lt;p&gt;なもり先生のすごい所は、今まで接点のなかった登場人物たちのつながりをとても自然に描かれるところです。例えば、歳が離れていたり、性格的に相容れなさそうなタイプでも「あー、そうやって繋がるんですね」と思わず唸ってしまうような接点が描かれます。&lt;/p&gt;
&lt;p&gt;ただ、”ゆるゆり”というタイトルの通りかなりゆるーい展開です。濃厚な絡みや、恋愛で重要な葛藤のシーンなどは描かれません。そういうのは二次創作で補給しましょう！！&lt;/p&gt;
&lt;h5 id=&#34;こんな人におすすめ&#34;&gt;こんな人におすすめ&lt;/h5&gt;
&lt;p&gt;ということで、以下のような方におすすめです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;さまざまなカップリングを楽しみたい！&lt;/li&gt;
&lt;li&gt;妄想の種をひろって自分で展開を広げたい！&lt;/li&gt;
&lt;li&gt;ゆるーい百合が見たい！&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-girl-friends&#34;&gt;2. GIRL FRIENDS&lt;/h4&gt;
&lt;p&gt;GIRL FRIENDSはアクションコミックスにて2006年から2010年まで連載されていた森永みるく先生の作品です。&lt;/p&gt;
&lt;p&gt;百合初心者におすすめの作品として有名なJK百合です！&lt;/p&gt;
&lt;h5 id=&#34;ここみてポイント-1&#34;&gt;ここみてポイント&lt;/h5&gt;
&lt;p&gt;GIRL FRIENDSは&lt;strong&gt;友情と愛情の違いについて考えさせられる&lt;/strong&gt;作品です。&lt;/p&gt;
&lt;p&gt;地味めな女子高生だった真理子が、ギャルっぽい様子の亜希子と知り合い、亜希子に刺激をもらいながら女子高生らしい遊びに目覚めていきます。
そのような過程から、自分に新しい世界や楽しい毎日を教えてくれた亜希子に強い親しみをいだき、その環状は徐々に友情を超えて行きます。&lt;/p&gt;
&lt;p&gt;眠っている亜希子に対してなぜか真理子はキスしたいと思ったり、彼氏がいる亜希子に嫉妬の感情を覚えたり、という経験から徐々に自分の気持ちを自覚していきます。
亜希子も真理子に対して少しずつ友情を超えた感情をいだき始めて、お互いに&lt;strong&gt;好き&lt;/strong&gt;を意識しはじめます。&lt;/p&gt;
&lt;p&gt;相手に対する思いが強い愛情であるということを自覚していく過程で、二人は&lt;strong&gt;友情&lt;/strong&gt;と&lt;strong&gt;愛情&lt;/strong&gt;の違いについて考えます。
この2人の葛藤を見て私も「友情と愛情の違いはなんだろう？」と深く考えた記憶があります。&lt;/p&gt;
&lt;p&gt;最終的には2人は結ばれて、最後は甘い甘い2人の生活を見届けられるので、安心して読めます。&lt;/p&gt;
&lt;h5 id=&#34;こんな人におすすめ-1&#34;&gt;こんな人におすすめ&lt;/h5&gt;
&lt;p&gt;ということで、以下のような方におすすめです&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;王道のJK百合が見たい！&lt;/li&gt;
&lt;li&gt;すでに完結した作品がみたい！&lt;/li&gt;
&lt;li&gt;甘々な展開が見たい！&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-加瀬さんシリーズ&#34;&gt;3. 加瀬さんシリーズ&lt;/h4&gt;
&lt;p&gt;加瀬さんシリーズは、ウィングスにて連載中の高嶋ひろみ先生の作品です。
俗称は加瀬さんシリーズなのですが、単行本はすべて &lt;strong&gt;&amp;ldquo;○○と加瀬さん&amp;rdquo;&lt;/strong&gt; というタイトルで統一されているため、加瀬さんシリーズと呼ばれています。&lt;/p&gt;
&lt;h5 id=&#34;ここみてポイント-2&#34;&gt;ここみてポイント&lt;/h5&gt;
&lt;p&gt;加瀬さんシリーズは&lt;strong&gt;初々しい女子高生の恋愛を応援する&lt;/strong&gt;作品です。
とっっっっっっっにかく初々しいです！！&lt;/p&gt;
&lt;p&gt;陸上部員の加瀬さんと緑化委員の山田さんの物語なのですが、加瀬さんが山田さんを好きになるまでの過程がとても心温まります。
とっても簡単に言うと、緑化委員として日々健気に頑張る山田さんのことが目についてから気になり始めて、ついつい目で追っちゃっていつの間にか好きになっているという感じです。
&lt;strong&gt;可愛くないですか？私は可愛いと思います！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;無事お付き合いをしたあとも、色々と壁が現れますが2人で乗り越えてゆく姿は、心のそこから応援してあげたくなります。
加瀬さんは卒業した先輩(女性)と付き合っていたのではという噂を聞いて、先輩に嫉妬したり、先輩と比べて自分なんか加瀬さんに釣り合わないと自信を失ってしまう場面もあります。
しかし、&lt;strong&gt;加瀬さんがイケメン彼女力を発揮して山田さんの自信を取り戻させるのですが、本当にかっこいいです！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;その後、大学受験でも山田さんが加瀬さんの影響を受けて、加瀬さんと同じく東京の大学に行きたいとがんばります。
親からの反対を受けるのですが、自分の努力や結果でなんとか説得します。その原動力は加瀬さんの近くに居たいという思いなので本当に健気です。&lt;/p&gt;
&lt;p&gt;無事大学受験を終え、東京でひとり暮らしをはじめてからやっと2人は体を重ねるのですが、これまで2人で一緒に壁を乗り越えてきたことを思うと&lt;strong&gt;本当に泣けます。&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;こんな人におすすめ-2&#34;&gt;こんな人におすすめ&lt;/h5&gt;
&lt;p&gt;ということで、以下のような方におすすめです&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初々しい百合をみてキュンキュンしたい！&lt;/li&gt;
&lt;li&gt;長い長い時間をかけて愛を育む様子が見たい！&lt;/li&gt;
&lt;li&gt;陸上部イケメン女子が見たい！&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;4-オトメの帝国&#34;&gt;4. オトメの帝国&lt;/h4&gt;
&lt;p&gt;オトメの帝国は、少年ジャンプ+にて連載されている岸虎次郎先生の作品です。
とある女子校の複数のカップルのストーリーを描くオムニバス形式の作品となっています。&lt;/p&gt;
&lt;p&gt;ゆるゆりとは異なり、**固定のカップリングが明確に存在します。**それぞれのカップリングがそれぞれの色を出していて、見ていて飽きないです。
とっても重い展開があってそれを乗り越えるカップルがいれば、陽気な留学生と陰気な漫画部の生徒のカップルもあったりします。
「あのカップルは今後どのように発展していくんだろう？」とか、「このカップルは見ていて安心するなぁ」とか、「このカップルは毎話イチャイチャしてるなぁ」とか本当に色々あります！&lt;/p&gt;
&lt;p&gt;特に&lt;strong&gt;あーちえ&lt;/strong&gt;というカップリングは、あーちえの話だけまとめられた「あーちえスペシャル」という単行本も出ているので、これだけでも読んでみる価値があると思います。&lt;/p&gt;
&lt;p&gt;作画に関しても特筆するべき項目があります。それは、&lt;strong&gt;登場人物たちの表情です&lt;/strong&gt;
陳腐な言葉で申し訳ないのですが、&lt;strong&gt;まるで生きているかのような&lt;/strong&gt;表情であり、&lt;strong&gt;このシーンはこの表情しかないっていう最高の表情&lt;/strong&gt;を描かれています。
岸虎次郎先生のこだわりを強く感じる部分なので、もし読むことがあればぜひ登場人物たちの表情に注目して読んでみてください！大事なことなのでもう一度いいますが、本当に&lt;strong&gt;この表情以外ありえない&lt;/strong&gt;という表情をしています。&lt;/p&gt;
&lt;h5 id=&#34;こんな人におすすめ-3&#34;&gt;こんな人におすすめ&lt;/h5&gt;
&lt;p&gt;ということで、以下のような人におすすめです&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;複数の濃厚な百合を一気に楽しみたい！&lt;/li&gt;
&lt;li&gt;リアルな作画でキャラクターが生き生きしている姿がみたい！&lt;/li&gt;
&lt;li&gt;甘々な百合が見たい！&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;おわりに&#34;&gt;おわりに&lt;/h4&gt;
&lt;p&gt;いかがでしたでしょうか？&lt;/p&gt;
&lt;p&gt;他にももっともっと紹介したい作品があったのですが、時間や気力の関係で紹介しきれませんでした。それでもぜひ知って欲しいので、タイトルとひとくちめもだけ記載しておきます。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;魔法少女まどかマギカ&lt;/li&gt;
&lt;li&gt;ささめきこと&lt;/li&gt;
&lt;li&gt;ふたりモノローグ&lt;/li&gt;
&lt;li&gt;私がモテないのはどう考えてもお前らが悪い&lt;/li&gt;
&lt;li&gt;小林さんちのメイドラゴン&lt;/li&gt;
&lt;li&gt;2DK、Gペン、目覚まし時計&lt;/li&gt;
&lt;li&gt;安達としまむら&lt;/li&gt;
&lt;li&gt;オクターヴ&lt;/li&gt;
&lt;li&gt;極上ドロップス&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;作品を紹介する上で、本当はもっともっと適切な表現や言葉あると思うのですが、どうしても語彙力がたりず悔しい気持ちでいっぱいです。&lt;/p&gt;
&lt;p&gt;すこしでも皆さんの百合人生が良いものになるよう貢献できていたら幸いです。&lt;/p&gt;
- https://youtangai.github.io/posts/yuri_introduction/ - Copyright © 2019–2021, youtangai; all rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>はじめまして</title>
        <link>https://youtangai.github.io/about/</link>
        <pubDate>Tue, 10 Dec 2019 00:00:00 +0000</pubDate>
        
        <guid>https://youtangai.github.io/about/</guid>
        <description>youtangaiのブログ https://youtangai.github.io/about/ -&lt;h1 id=&#34;プロフィール&#34;&gt;プロフィール&lt;/h1&gt;
&lt;p&gt;2019年12月12日現在の内容です&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公立はこだて未来大学 修士2年&lt;/li&gt;
&lt;li&gt;24歳&lt;/li&gt;
&lt;li&gt;男性&lt;/li&gt;
&lt;li&gt;サーバサイドエンジニア&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;趣味紹介&#34;&gt;趣味紹介&lt;/h1&gt;
&lt;p&gt;こんにちは、youtangaiです&lt;/p&gt;
&lt;p&gt;15歳から百合に目覚めて以来ずっと百合が好きで、主にコミック百合姫を追っかけています。大沢やよい先生の作品が大好きです。&lt;/p&gt;
&lt;p&gt;ゲームも好きでかなりやっています。最近ハマっているゲームはLoL(League of Legends)で、ハマりすぎて時間が無限にとけて困っています。IDはyoutangaiでやっています。&lt;/p&gt;
&lt;p&gt;Vtuberも好きなのですが、特にホロライブのライバーが好きで応援していて、大神ミオちゃんが一番の推しです。&lt;/p&gt;
&lt;h1 id=&#34;ブログ開設の動機&#34;&gt;ブログ開設の動機&lt;/h1&gt;
&lt;p&gt;2019年にアドベントカレンダーを書く機会が増えたので、ブログを開設しました。&lt;/p&gt;
&lt;p&gt;普段からGo言語を利用しており、&lt;a href=&#34;https://gohugo.io/&#34;&gt;HUGO&lt;/a&gt;が気になっていたのでサイトのジェネレータとしてHUGOを採用しました。&lt;/p&gt;
&lt;h1 id=&#34;投稿内容&#34;&gt;投稿内容&lt;/h1&gt;
&lt;p&gt;私のブログらしく、以下のカテゴリでブログを投稿しようと考えています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;百合&lt;/li&gt;
&lt;li&gt;Vtuber&lt;/li&gt;
&lt;li&gt;LoL&lt;/li&gt;
&lt;li&gt;Go言語&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上記以外にも要望がある内容や、私の価値観や考え方なども投稿できたら良いなと思っています。&lt;/p&gt;
&lt;p&gt;よろしくお願いします。&lt;/p&gt;
- https://youtangai.github.io/about/ - Copyright © 2019–2021, youtangai; all rights reserved.</description>
        </item>
    
    
    
        <item>
        <title>私が考えるコミュニケーションの技術</title>
        <link>https://youtangai.github.io/posts/communication/</link>
        <pubDate>Thu, 13 Dec 2018 00:27:32 +0900</pubDate>
        
        <guid>https://youtangai.github.io/posts/communication/</guid>
        <description>youtangaiのブログ https://youtangai.github.io/posts/communication/ -&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;
&lt;p&gt;はじめまして，よーちゃんです&lt;br&gt;
初ブログなので，何を書こうかとても迷いました．
悩んだ結果，あえて情報技術には全く触れずに&lt;code&gt;コミュニケーション技術&lt;/code&gt;について書こうと思いました．&lt;/p&gt;
&lt;h1 id=&#34;よーちゃんのコミュニケーション4ヶ条&#34;&gt;よーちゃんのコミュニケーション4ヶ条&lt;/h1&gt;
&lt;p&gt;私は普段から以下の4ヶ条を心がけて人と接しています．&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;相手の価値観を知る&lt;/li&gt;
&lt;li&gt;自分の価値観を押し付けない&lt;/li&gt;
&lt;li&gt;相手の話は最後まで聞く&lt;/li&gt;
&lt;li&gt;自分の意見を主張する&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;すべて当たり前のようなことですが，普段から心がけていないと，意外とできないです．&lt;br&gt;
ひとつずつ説明します．&lt;/p&gt;
&lt;h2 id=&#34;1相手の価値観を知る&#34;&gt;1.相手の価値観を知る&lt;/h2&gt;
&lt;p&gt;相手がどのようなことを&lt;code&gt;重要視&lt;/code&gt;して物事を考えているのか知るようにしています．ディスカッションをする際は必ず行っています．なぜなら，相手の価値観を知れば，相手の意見も素直に&lt;code&gt;納得&lt;/code&gt;できるようになりますし，相手を&lt;code&gt;説得&lt;/code&gt;する際にも役立つからです．&lt;/p&gt;
&lt;h2 id=&#34;2自分の価値観を押し付けない&#34;&gt;2.自分の価値観を押し付けない&lt;/h2&gt;
&lt;p&gt;価値観を押し付けるという行為は，&lt;code&gt;自分&lt;/code&gt;を&lt;code&gt;不愉快&lt;/code&gt;にしてしまいます．例えば「情報学生ならgitは使えて当然でしょ」という考え方をもって人と接してしまうと，gitを使えない情報学生と接するときに「なんでこれくらいできないんだろう」とイラついてしまいます．イラつきが態度に出ると，相手にも不愉快な思いをさせてしまいます．こうならないためにも，自分の価値観を押し付けることは避けています．&lt;/p&gt;
&lt;h2 id=&#34;3相手の話は最後まで聞く&#34;&gt;3.相手の話は最後まで聞く&lt;/h2&gt;
&lt;p&gt;相手の主張の途中で否定的な意見を持ったとしても，必ず最後まで話を聞くようにしています．なぜなら，相手が主張の途中である以上，&lt;code&gt;自分の予測で相手の主張を決めつけている&lt;/code&gt;からです．最後まで主張を聞いた上で，「つまり，あなたが言っていることはこういうことですか？」と確認しています．そうすることで，スムーズなディスカッションが可能になります．&lt;/p&gt;
&lt;h2 id=&#34;4自分の意見を主張する&#34;&gt;4.自分の意見を主張する&lt;/h2&gt;
&lt;p&gt;人から&lt;code&gt;情報を引き出すという行為&lt;/code&gt;はかなり&lt;code&gt;体力を使う行為&lt;/code&gt;です．自分が意見を主張しないということは，相手に情報を引き出す役割を担わせるということです．相手に余計な体力を使わせないためにも，普段から意識して自分の意見は主張しています．&lt;/p&gt;
&lt;h1 id=&#34;おわりに&#34;&gt;おわりに&lt;/h1&gt;
&lt;p&gt;最後まで駄文を読んでくださってありがとうございました．&lt;br&gt;
これを機会に，普段のコミュニケーションを振り返ってみていただければ，書いた意味があったかなと思います．&lt;br&gt;
当たり前のことですが改めて意識していただけたらとても嬉しいです．&lt;/p&gt;
&lt;h1 id=&#34;感想&#34;&gt;感想&lt;/h1&gt;
&lt;p&gt;自分が普段から心がけていることを文章にするのはとても恥ずかしいですね&amp;hellip;笑&lt;br&gt;
汚い文章ですが初投稿ということで勘弁してください汗&lt;/p&gt;
- https://youtangai.github.io/posts/communication/ - Copyright © 2019–2021, youtangai; all rights reserved.</description>
        </item>
    
    
  </channel>
</rss> 