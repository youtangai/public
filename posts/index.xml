<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on youtangaiのブログ</title>
    <link>https://youtangai.github.io/posts/</link>
    <description>Recent content in Posts on youtangaiのブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright © 2019–2021, youtangai; all rights reserved.</copyright>
    <lastBuildDate>Tue, 07 Dec 2021 21:19:00 +0900</lastBuildDate><atom:link href="https://youtangai.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Akka Streamsについて調べてみたよ</title>
      <link>https://youtangai.github.io/posts/akka_stream/</link>
      <pubDate>Tue, 07 Dec 2021 21:19:00 +0900</pubDate>
      
      <guid>https://youtangai.github.io/posts/akka_stream/</guid>
      <description>はじめに 皆さんこんにちは、最近パーソナルトレーニングを始めたyoutangaiです。 ダイエットと運動不足解消を目的に始めたのですが、適切なフォームでトレーニングできてとても満足度が高いです。
さて、今回の記事は、メディア事業部の広告横軸組織PTA(twitter)のアドベントカレンダー8日目の記事となります。よろしくお願い致します。
先に述べますと今回の内容はAkka Streamsの基礎的な概念を調査した内容になります。そのため、対象の読者は私と同じでAkka Streamsなんもわからんという方々です。
動機 Amebaの広告システムは稼働してから7,8年くらい(正確じゃないかもです)経過しており、古くから稼働しているシステムが結構あります。 その中でも、RDBに保存されているレコードをインメモリデータストアに保存するシステムが、ブラックボックスになってしまっています。 我々の広告配信システムにおいてかなり重要なシステムで、ここで障害が発生すると大損害が発生する可能性があります。 このままではまずいということで、このシステムについて調査することになりました。 しかし、このシステムはScalaのAkka Streamsで実装されており、ソースコードを読んでいてもすんなり理解できる内容ではありませんでした。 そこで、基礎的な部分からしっかり理解しようと思ったのが動機です。
Akka Streamsとは ここからが、本題です。
Akka Streamsとは、Reactive StreamsのAkka実装です。 そのため、Akka Streamsを理解するためにはReactive Streamsを理解する必要があります。
Reactive Streams Reactive Streamsのドキュメントではこのように記述されています。
Reactive Streams is an initiative to provide a standard for asynchronous stream processing with non-blocking back pressure 直訳すると、Reactive Streamsとはノンブロッキングなバックプレッシャーを備えた非同期ストリーム処理の標準です。 ノンブロッキングや非同期ストリーム処理はなんとなく想像がつくのですが、バックプレッシャーという単語は初耳でした。
バックプレッシャー Reactive Streamsでは、データを流すパブリッシャーと、流れてきたデータを受け取るサブスクライバーが登場します。
バックプレッシャーがない場合、パブリッシャーが流すデータの量がサブスクライバーの処理能力を上回ると、サブスクライバーの処理が間に合わず、データが詰まってしまいます。
このような問題を回避するためにバックプレッシャーがあります。サブスクライバーは、自身が処理できるデータ量を定義し、自身が処理できる分だけパブリッシャーからデータを受け取ります。パブリッシャー側で流量制限を行う必要がないため、効率よくデータを処理することが可能になります。
抽象概念について さて、これまでReactive Streamsについて述べてきましたが、ここからはAkka Streamsにおける概念について述べます。 Akka StreamsにはSource、Sink、Flow、Graphという4つの重要な抽象化された概念があります。先に簡単に述べてしまうと、Sourceでデータを作成し、Flowで流れてきたデータを加工し、Sinkで最終的に加工されたデータを受け取るという流れになっています。これらの流れ全体をGraphと呼びます。
Source データを生成する場所、つまりパブリッシャーです。ここで、ファイルの中身を読み出したり、HTTPリクエストボディの中身を読み出したり、データストアからデータを読み出したりする。
Sink 最終的にデータを受け取る場所、つまりサブスクライバーです。ここで、受け取ったデータをファイルに書き出したり、データストアに書き込んだりするはず。実際にファイル書き出ししている例は見つけたが、データストアに書き込んだりする例を見つけられなかったので想像の話をしています。例があったら教えて下さい。
Flow データを処理する場所です。Flowだけは特殊で、サブスクライバーでありパブリッシャーです。Sourceからデータを受け取ったり、FlowからFlowへデータが流れたり、FlowからSinkにデータを流したりします。 ここでは、流れてきたデータのデコード処理だったり、想定しないデータのフィルタリングなどを行います。
Graph Sourceに始まり、0以上のFlowを経由して、Sinkに終わる一連の流れがGraphです。 このGraphを定義し実行することで、処理されたデータを得ることができます。
おわりに 今回調べた結果、ソースコードを読んでいてわからないと思っていた部分が理解できたので、今後のシステム調査はスムーズに進んでくれるといいなと思っています。 引き続きシステムの調査は行うので、改めて調査が必要な内容が出てきたら再度まとめたいと考えています。</description>
    </item>
    
    <item>
      <title>EKSを1.16にバージョンアップするの大変だった</title>
      <link>https://youtangai.github.io/posts/eks_1_16/</link>
      <pubDate>Tue, 11 May 2021 22:24:44 +0900</pubDate>
      
      <guid>https://youtangai.github.io/posts/eks_1_16/</guid>
      <description>はじめに  この記事は、私が仕事でEKS(Elastic Kubernetes Service)のバージョンアップを行った際に、とても苦労したので備忘録も兼ねてやったこと・ハマったことをまとめた記事になります 私達のチームで運用しているEKSのバージョンが1.15だったのですが、EKSのリリースカレンダーをみると5月3日でサポートが終了してしまうという状況でした  これに気づいたのが4月20日頃で、猶予が2週間しかないので大慌てで更新作業を行いました    やるべきこと APIバージョンの変更  1.16の変更点として影響が大きかったのは一部のAPIバージョンが非対応になったことです 例えば、DaemonSetsとDeploymentsとReplicaSetsにおいて、extensions/v1beta1ではなくapps/v1を利用することが推奨になりました  変更対象のアプリケーション  私達のクラスタ上には、実際に非推奨のAPIバージョンで稼働しているDaemonSets・Deploymentsが存在していたので、それらのAPIバージョンを更新する必要がありました 対象となるアプリケーションは下記です(一部抜粋)  datadog cluster-autoscaler kiam external-dns    作業内容 作業内容は大きく以下の２つです。それぞれについて詳しく記述します。
 アプリケーションのAPIバージョン変更 ノードのバージョン変更  アプリケーションのAPIバージョン変更  基本的にアプリケーションはhelmfileで管理していたので、helmfileの変更作業の内容を記述します ちなみにhelmのバージョンは2系です  datadog  大まか作業内容  datadogはhelmのstable/datadogというチャートで管理しています もともとデプロイされていたバージョンは1.30.8でしたが、これを1.35.1に上げました   ハマったポイント  Podのイメージタグが変更されない  症状：チャートのバージョンを変更したにも関わらず、起動しているPodのイメージのタグが変更されませんでした 原因：jmx用のイメージを利用するためvaluesで直接タグが指定されていることに気づかなかったことです(valuesの中身をしっかりみるべきでした) 対応：valuesでイメージのタグを6.13.0-jmxに変更      cluster-autoscaler  大まか作業内容  cluster-autoscalerはhelmのstable/cluster-autoscalerというチャートで管理しています もともとデプロイされていたバージョンは0.12.4でしたが、これを7.0.0に上げました   ハマったポイント  autoDiscovery機能が働かない  症状：cluster-autoscalerが起動するも、AutoDiscovery機能によってAutoScalingGroupを発見したというログが流れない 原因：chartのバージョンが大きく上がったことでvaluesに新しくtagsという項目が追加されており、そこのデフォルトの値が期待するものと異なっていた 対応：下記内容を追加した      autoDiscovery: clusterName: {クラスタの名前} tags: - k8s.</description>
    </item>
    
    <item>
      <title>ElasticBeanstalkの仕組みを調べた</title>
      <link>https://youtangai.github.io/posts/elastic_beanstalk/</link>
      <pubDate>Mon, 26 Apr 2021 00:11:12 +0900</pubDate>
      
      <guid>https://youtangai.github.io/posts/elastic_beanstalk/</guid>
      <description>はじめに  この記事は、私が仕事で利用しているElastic BeanstalkがAWS上のどのような技術で構成されているのか知りたくて調べた結果をまとめた記事になります  入社してから1年近く利用しているのですが、特に深堀りすることもなく利用していたので、ちゃんと調べようと思った次第です   あまり突っ込んだところまでは調べてません AWSのどのリソースを利用して実現しているのかを調べています  Elastic Beanstalk(EB)とは  こちらがEBの公式ドキュメントです。日本語版も結構しっかりしているので、こちらを読むのが良いと思います。 私の認識でめっちゃ簡単に言うと、アプリケーションのプロビジョニング、ロードバランシング、スケーリング、モニタリングを自動的に行なってくれる環境を構築するサービスです  どうやって実現しているのか  いよいよ本題なのですが、こちらも公式のドキュメントを読むのが最も誤解なくて良いと思います。 ただ、この調子で公式ドキュメントのリンクを貼り付けていくだけでは私の頭に定着しないと思うので、自分の言葉で説明していきます  意図的に英語の公式ドキュメントを読むことで噛み砕くプロセスを追加しています(そんなことはどうでもいい)    構成要素  EB環境を構築すると、下記リソースが作られます  Elastic Load Balancer Route53のCNAMEレコード Auto Scaling Group EC2 Instance Security Group   それぞれについて詳細を深掘っていきます  Elastic Load Balancer &amp;amp; Route53  ロードバランサーがEB環境へのアクセスの入り口になります EB環境は、環境ごとにURLを持っています  例：{アプリケーション名}.{リージョン}.elasticbeanstalk.com このURLはロードバランサーへのエイリアスになっています  Route53にCNMAEレコードとして登録されています      Auto Sacling Group  上記ロードバランサの裏側にAuto Scaling Group(ASG)がいます このASGには1つ以上のEC2インスタンスが存在します  EB環境への負荷が高くなったら、ASGにインスタンスが追加される 逆に負荷が低くなれば、ASGからインスタンスが除かれる(ただし、常に少なくとも1つは存在する)    EC2 Instance  EC2インスタンス上にはHost Manager(HM)というコンポーネントが起動していて、このコンポーネントが下記のタスクを行っている  アプリケーションのデプロイ コンソールやAPI、コマンドラインでのイベントやメトリクスをアグリゲートする インスタンスレベルのイベントを生成する アプリケーションのログファイル監視 アプリケーションサーバの監視 Patching instance components(これよくわかりませんでした) アプリケーションログのローテーションをして、S3に保存する   デフォルトでポート80からのアクセスを許可するSecurity Groupが作成されていて、EBによって作成されたEC2はこのセキュリティグループに所属している  まとめると  EB環境へのリクエストはロードバランサでうける ロードバランサの裏にはASGがある ASGには常に1つ以上のEC2インスタンスが存在する EC2インスタンス上ではアプリケーションだけでなくHMが稼働しており、HMが色々やってる  終わりに  1年たってようやく調べたのですが、もっと早めに調べればよかったなと思ってます 今回はとっても簡単な調査程度で終わりますが、実際の環境で実験とかハマったこととか書いて行けるといいなと思っています(かける範囲で) 更新頑張るぞい  </description>
    </item>
    
    <item>
      <title>おすすめ百合作品紹介</title>
      <link>https://youtangai.github.io/posts/yuri_introduction/</link>
      <pubDate>Thu, 12 Dec 2019 18:27:00 +0900</pubDate>
      
      <guid>https://youtangai.github.io/posts/yuri_introduction/</guid>
      <description>はじめに この投稿はFUN Advent Calendar 2019 part2の2日目の投稿です
しかし、私は2日を過ぎてから「空いてるのでやりませんか？」と誘ってもらってから書いたので投稿は12月18日となっています
許してください
私についてはこちらをご覧いただけると幸いです
百合作品紹介 初めての投稿では、私の百合人生において大きな影響を与えてくれた4個の百合作品を紹介します。百合男子としてまだまだにわかの領域を出ませんが、「私もその作品好き！」とか「その作品知らないから読んでみたいな」と思ってもらえるように紹介できたら良いなと思っています。
唐突ですが、百合漫画界隈では有名な百合ナビというサイトがあります。ふりっぺさんという方が運営されているのですが、ここで百合漫画総選挙という企画が2017、2018、2019年と3回行われています。正直、百合作品を知るにはこちらを見たほうが情報の品質が高いので、ぜひこちらも見てみてください。
以下に、過去の百合漫画総選挙の結果ページのリンクを張っておきます。
 第1回百合漫画総選挙 第2回百合漫画総選挙 第3回百合漫画総選挙  4個の百合作品 早速ですが、まずは全作品のタイトルを列挙します(作品に出会った順)。
 ゆるゆり GIRL FRIENDS 加瀬さんシリーズ オトメの帝国  聞き覚えがあるものはありますか？ ある人はぜひ私と語り合いましょう。twitterでお待ちしております。
聞き覚えが無い作品がありますか？Kindleアプリをご利用でしたら貸し出すのでぜひtwitterにて連絡してください。読んだあとに語りあいましょう。
1つずつ詳細に紹介するにはあまりにも量が多いので、私が感じている作品の特徴を紹介していきます！
1. ゆるゆり ゆるゆりはコミック百合姫で連載されているなもり先生の作品です。
2019年に10周年を迎えた作品で、界隈ではかなり有名な作品となっています。タイトルだけでも知っている方は多いのではないでしょうか？
ゆるゆりは3期までアニメ化されるほどの人気作品で、かなりの人を百合に目覚めさせ、百合の普及に大きく貢献された作品だと思っています。
私もこのゆるゆりがきっかけで百合に目覚めました。
ここみてポイント ゆるゆりという作品を紹介する上で絶対に外せないのは
登場するキャラクター同士で様々なカップリングが楽しめる
という点です。
なもり先生のすごい所は、今まで接点のなかった登場人物たちのつながりをとても自然に描かれるところです。例えば、歳が離れていたり、性格的に相容れなさそうなタイプでも「あー、そうやって繋がるんですね」と思わず唸ってしまうような接点が描かれます。
ただ、”ゆるゆり”というタイトルの通りかなりゆるーい展開です。濃厚な絡みや、恋愛で重要な葛藤のシーンなどは描かれません。そういうのは二次創作で補給しましょう！！
こんな人におすすめ ということで、以下のような方におすすめです。
 さまざまなカップリングを楽しみたい！ 妄想の種をひろって自分で展開を広げたい！ ゆるーい百合が見たい！  2. GIRL FRIENDS GIRL FRIENDSはアクションコミックスにて2006年から2010年まで連載されていた森永みるく先生の作品です。
百合初心者におすすめの作品として有名なJK百合です！
ここみてポイント GIRL FRIENDSは友情と愛情の違いについて考えさせられる作品です。
地味めな女子高生だった真理子が、ギャルっぽい様子の亜希子と知り合い、亜希子に刺激をもらいながら女子高生らしい遊びに目覚めていきます。 そのような過程から、自分に新しい世界や楽しい毎日を教えてくれた亜希子に強い親しみをいだき、その環状は徐々に友情を超えて行きます。
眠っている亜希子に対してなぜか真理子はキスしたいと思ったり、彼氏がいる亜希子に嫉妬の感情を覚えたり、という経験から徐々に自分の気持ちを自覚していきます。 亜希子も真理子に対して少しずつ友情を超えた感情をいだき始めて、お互いに好きを意識しはじめます。
相手に対する思いが強い愛情であるということを自覚していく過程で、二人は友情と愛情の違いについて考えます。 この2人の葛藤を見て私も「友情と愛情の違いはなんだろう？」と深く考えた記憶があります。
最終的には2人は結ばれて、最後は甘い甘い2人の生活を見届けられるので、安心して読めます。
こんな人におすすめ ということで、以下のような方におすすめです
 王道のJK百合が見たい！ すでに完結した作品がみたい！ 甘々な展開が見たい！  3.</description>
    </item>
    
    <item>
      <title>私が考えるコミュニケーションの技術</title>
      <link>https://youtangai.github.io/posts/communication/</link>
      <pubDate>Thu, 13 Dec 2018 00:27:32 +0900</pubDate>
      
      <guid>https://youtangai.github.io/posts/communication/</guid>
      <description>はじめに はじめまして，よーちゃんです
初ブログなので，何を書こうかとても迷いました． 悩んだ結果，あえて情報技術には全く触れずにコミュニケーション技術について書こうと思いました．
よーちゃんのコミュニケーション4ヶ条 私は普段から以下の4ヶ条を心がけて人と接しています．
 相手の価値観を知る 自分の価値観を押し付けない 相手の話は最後まで聞く 自分の意見を主張する  すべて当たり前のようなことですが，普段から心がけていないと，意外とできないです．
ひとつずつ説明します．
1.相手の価値観を知る 相手がどのようなことを重要視して物事を考えているのか知るようにしています．ディスカッションをする際は必ず行っています．なぜなら，相手の価値観を知れば，相手の意見も素直に納得できるようになりますし，相手を説得する際にも役立つからです．
2.自分の価値観を押し付けない 価値観を押し付けるという行為は，自分を不愉快にしてしまいます．例えば「情報学生ならgitは使えて当然でしょ」という考え方をもって人と接してしまうと，gitを使えない情報学生と接するときに「なんでこれくらいできないんだろう」とイラついてしまいます．イラつきが態度に出ると，相手にも不愉快な思いをさせてしまいます．こうならないためにも，自分の価値観を押し付けることは避けています．
3.相手の話は最後まで聞く 相手の主張の途中で否定的な意見を持ったとしても，必ず最後まで話を聞くようにしています．なぜなら，相手が主張の途中である以上，自分の予測で相手の主張を決めつけているからです．最後まで主張を聞いた上で，「つまり，あなたが言っていることはこういうことですか？」と確認しています．そうすることで，スムーズなディスカッションが可能になります．
4.自分の意見を主張する 人から情報を引き出すという行為はかなり体力を使う行為です．自分が意見を主張しないということは，相手に情報を引き出す役割を担わせるということです．相手に余計な体力を使わせないためにも，普段から意識して自分の意見は主張しています．
おわりに 最後まで駄文を読んでくださってありがとうございました．
これを機会に，普段のコミュニケーションを振り返ってみていただければ，書いた意味があったかなと思います．
当たり前のことですが改めて意識していただけたらとても嬉しいです．
感想 自分が普段から心がけていることを文章にするのはとても恥ずかしいですね&amp;hellip;笑
汚い文章ですが初投稿ということで勘弁してください汗</description>
    </item>
    
  </channel>
</rss>
