<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AWS on youtangaiのブログ</title>
    <link>https://youtangai.github.io/tags/aws/</link>
    <description>Recent content in AWS on youtangaiのブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright © 2019–2021, youtangai; all rights reserved.</copyright>
    <lastBuildDate>Tue, 11 May 2021 22:24:44 +0900</lastBuildDate>
    
	<atom:link href="https://youtangai.github.io/tags/aws/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>EKSを1.16にバージョンアップするの大変だった</title>
      <link>https://youtangai.github.io/posts/eks_1_16/</link>
      <pubDate>Tue, 11 May 2021 22:24:44 +0900</pubDate>
      
      <guid>https://youtangai.github.io/posts/eks_1_16/</guid>
      <description>はじめに  この記事は、私が仕事でEKS(Elastic Kubernetes Service)のバージョンアップを行った際に、とても苦労したので備忘録も兼ねてやったこと・ハマったことをまとめた記事になります 私達のチームで運用しているEKSのバージョンが1.15だったのですが、EKSのリリースカレンダーをみると5月3日でサポートが終了してしまうという状況でした  これに気づいたのが4月20日頃で、猶予が2週間しかないので大慌てで更新作業を行いました    やるべきこと APIバージョンの変更  1.16の変更点として影響が大きかったのは一部のAPIバージョンが非対応になったことです 例えば、DaemonSetsとDeploymentsとReplicaSetsにおいて、extensions/v1beta1ではなくapps/v1を利用することが推奨になりました  変更対象のアプリケーション  私達のクラスタ上には、実際に非推奨のAPIバージョンで稼働しているDaemonSets・Deploymentsが存在していたので、それらのAPIバージョンを更新する必要がありました 対象となるアプリケーションは下記です(一部抜粋)  datadog cluster-autoscaler kiam external-dns    作業内容 作業内容は大きく以下の２つです。それぞれについて詳しく記述します。
 アプリケーションのAPIバージョン変更 ノードのバージョン変更  アプリケーションのAPIバージョン変更  基本的にアプリケーションはhelmfileで管理していたので、helmfileの変更作業の内容を記述します ちなみにhelmのバージョンは2系です  datadog  大まか作業内容  datadogはhelmのstable/datadogというチャートで管理しています もともとデプロイされていたバージョンは1.30.8でしたが、これを1.35.1に上げました   ハマったポイント  Podのイメージタグが変更されない  症状：チャートのバージョンを変更したにも関わらず、起動しているPodのイメージのタグが変更されませんでした 原因：jmx用のイメージを利用するためvaluesで直接タグが指定されていることに気づかなかったことです(valuesの中身をしっかりみるべきでした) 対応：valuesでイメージのタグを6.13.0-jmxに変更      cluster-autoscaler  大まか作業内容  cluster-autoscalerはhelmのstable/cluster-autoscalerというチャートで管理しています もともとデプロイされていたバージョンは0.12.4でしたが、これを7.0.0に上げました   ハマったポイント  autoDiscovery機能が働かない  症状：cluster-autoscalerが起動するも、AutoDiscovery機能によってAutoScalingGroupを発見したというログが流れない 原因：chartのバージョンが大きく上がったことでvaluesに新しくtagsという項目が追加されており、そこのデフォルトの値が期待するものと異なっていた 対応：下記内容を追加した      autoDiscovery: clusterName: {クラスタの名前} tags: - k8s.</description>
    </item>
    
    <item>
      <title>ElasticBeanstalkの仕組みを調べた</title>
      <link>https://youtangai.github.io/posts/elastic_beanstalk/</link>
      <pubDate>Mon, 26 Apr 2021 00:11:12 +0900</pubDate>
      
      <guid>https://youtangai.github.io/posts/elastic_beanstalk/</guid>
      <description>はじめに  この記事は、私が仕事で利用しているElastic BeanstalkがAWS上のどのような技術で構成されているのか知りたくて調べた結果をまとめた記事になります  入社してから1年近く利用しているのですが、特に深堀りすることもなく利用していたので、ちゃんと調べようと思った次第です   あまり突っ込んだところまでは調べてません AWSのどのリソースを利用して実現しているのかを調べています  Elastic Beanstalk(EB)とは  こちらがEBの公式ドキュメントです。日本語版も結構しっかりしているので、こちらを読むのが良いと思います。 私の認識でめっちゃ簡単に言うと、アプリケーションのプロビジョニング、ロードバランシング、スケーリング、モニタリングを自動的に行なってくれる環境を構築するサービスです  どうやって実現しているのか  いよいよ本題なのですが、こちらも公式のドキュメントを読むのが最も誤解なくて良いと思います。 ただ、この調子で公式ドキュメントのリンクを貼り付けていくだけでは私の頭に定着しないと思うので、自分の言葉で説明していきます  意図的に英語の公式ドキュメントを読むことで噛み砕くプロセスを追加しています(そんなことはどうでもいい)    構成要素  EB環境を構築すると、下記リソースが作られます  Elastic Load Balancer Route53のCNAMEレコード Auto Scaling Group EC2 Instance Security Group   それぞれについて詳細を深掘っていきます  Elastic Load Balancer &amp;amp; Route53  ロードバランサーがEB環境へのアクセスの入り口になります EB環境は、環境ごとにURLを持っています  例：{アプリケーション名}.{リージョン}.elasticbeanstalk.com このURLはロードバランサーへのエイリアスになっています  Route53にCNMAEレコードとして登録されています      Auto Sacling Group  上記ロードバランサの裏側にAuto Scaling Group(ASG)がいます このASGには1つ以上のEC2インスタンスが存在します  EB環境への負荷が高くなったら、ASGにインスタンスが追加される 逆に負荷が低くなれば、ASGからインスタンスが除かれる(ただし、常に少なくとも1つは存在する)    EC2 Instance  EC2インスタンス上にはHost Manager(HM)というコンポーネントが起動していて、このコンポーネントが下記のタスクを行っている  アプリケーションのデプロイ コンソールやAPI、コマンドラインでのイベントやメトリクスをアグリゲートする インスタンスレベルのイベントを生成する アプリケーションのログファイル監視 アプリケーションサーバの監視 Patching instance components(これよくわかりませんでした) アプリケーションログのローテーションをして、S3に保存する   デフォルトでポート80からのアクセスを許可するSecurity Groupが作成されていて、EBによって作成されたEC2はこのセキュリティグループに所属している  まとめると  EB環境へのリクエストはロードバランサでうける ロードバランサの裏にはASGがある ASGには常に1つ以上のEC2インスタンスが存在する EC2インスタンス上ではアプリケーションだけでなくHMが稼働しており、HMが色々やってる  終わりに  1年たってようやく調べたのですが、もっと早めに調べればよかったなと思ってます 今回はとっても簡単な調査程度で終わりますが、実際の環境で実験とかハマったこととか書いて行けるといいなと思っています(かける範囲で) 更新頑張るぞい  </description>
    </item>
    
  </channel>
</rss>